diff --git a/app/config/services.yml b/app/config/services.yml
index 538ed30..f3b8a0c 100644
--- a/app/config/services.yml
+++ b/app/config/services.yml
@@ -7,3 +7,7 @@ services:
     shopping_cart:
         class: AppBundle\Store\ShoppingCart
         autowire: true
+
+    stripe_client:
+        class: AppBundle\StripeClient
+        autowire: true
diff --git a/src/AppBundle/Controller/OrderController.php b/src/AppBundle/Controller/OrderController.php
index c5ca7ab..fef9a51 100644
--- a/src/AppBundle/Controller/OrderController.php
+++ b/src/AppBundle/Controller/OrderController.php
@@ -38,18 +38,11 @@ class OrderController extends BaseController
 
             \Stripe\Stripe::setApiKey($this->getParameter('stripe_secret_key'));
 
+            $stripeClient = $this->get('stripe_client');
             /** @var User $user */
             $user = $this->getUser();
             if (!$user->getStripeCustomerId()) {
-                $customer = \Stripe\Customer::create([
-                    'email' => $user->getEmail(),
-                    'source' => $token
-                ]);
-                $user->setStripeCustomerId($customer->id);
-
-                $em = $this->getDoctrine()->getManager();
-                $em->persist($user);
-                $em->flush();
+                $stripeClient->createCustomer($user, $token);
             } else {
                 $customer = \Stripe\Customer::retrieve($user->getStripeCustomerId());
 
diff --git a/src/AppBundle/StripeClient.php b/src/AppBundle/StripeClient.php
index 99a186b..1720669 100644
--- a/src/AppBundle/StripeClient.php
+++ b/src/AppBundle/StripeClient.php
@@ -2,7 +2,29 @@
 
 namespace AppBundle;
 
+use AppBundle\Entity\User;
+use Doctrine\ORM\EntityManager;
+
 class StripeClient
 {
+    private $em;
+
+    public function __construct(EntityManager $em)
+    {
+        $this->em = $em;
+    }
+
+    public function createCustomer(User $user, $paymentToken)
+    {
+        $customer = \Stripe\Customer::create([
+            'email' => $user->getEmail(),
+            'source' => $paymentToken,
+        ]);
+        $user->setStripeCustomerId($customer->id);
+
+        $this->em->persist($user);
+        $this->em->flush($user);
 
+        return $customer;
+    }
 }
