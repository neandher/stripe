diff --git a/app/DoctrineMigrations/Version20160807113428.php b/app/DoctrineMigrations/Version20160807113428.php
new file mode 100644
index 0000000..3a9e393
--- /dev/null
+++ b/app/DoctrineMigrations/Version20160807113428.php
@@ -0,0 +1,34 @@
+<?php
+
+namespace Application\Migrations;
+
+use Doctrine\DBAL\Migrations\AbstractMigration;
+use Doctrine\DBAL\Schema\Schema;
+
+/**
+ * Auto-generated Migration: Please modify to your needs!
+ */
+class Version20160807113428 extends AbstractMigration
+{
+    /**
+     * @param Schema $schema
+     */
+    public function up(Schema $schema)
+    {
+        // this up() migration is auto-generated, please modify it to your needs
+        $this->abortIf($this->connection->getDatabasePlatform()->getName() != 'mysql', 'Migration can only be executed safely on \'mysql\'.');
+
+        $this->addSql('CREATE TABLE stripe_event_log (id INT AUTO_INCREMENT NOT NULL, stripe_event_id VARCHAR(255) NOT NULL, handled_at DATETIME NOT NULL, UNIQUE INDEX UNIQ_217D8BDC2CB034B8 (stripe_event_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci ENGINE = InnoDB');
+    }
+
+    /**
+     * @param Schema $schema
+     */
+    public function down(Schema $schema)
+    {
+        // this down() migration is auto-generated, please modify it to your needs
+        $this->abortIf($this->connection->getDatabasePlatform()->getName() != 'mysql', 'Migration can only be executed safely on \'mysql\'.');
+
+        $this->addSql('DROP TABLE stripe_event_log');
+    }
+}
diff --git a/src/AppBundle/Controller/WebhookController.php b/src/AppBundle/Controller/WebhookController.php
index 1dd1534..4115480 100644
--- a/src/AppBundle/Controller/WebhookController.php
+++ b/src/AppBundle/Controller/WebhookController.php
@@ -2,6 +2,7 @@
 
 namespace AppBundle\Controller;
 
+use AppBundle\Entity\StripeEventLog;
 use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\Response;
@@ -20,6 +21,17 @@ class WebhookController extends BaseController
 
         $eventId = $data['id'];
 
+        $em = $this->getDoctrine()->getManager();
+        $existingLog = $em->getRepository('AppBundle:StripeEventLog')
+            ->findOneBy(['stripeEventId' => $eventId]);
+        if ($existingLog) {
+            return new Response('Event previously handled');
+        }
+
+        $log = new StripeEventLog($eventId);
+        $em->persist($log);
+        $em->flush($log);
+
         if ($this->getParameter('verify_stripe_event')) {
             $stripeEvent = $this->get('stripe_client')
                 ->findEvent($eventId);
diff --git a/src/AppBundle/Entity/StripeEventLog.php b/src/AppBundle/Entity/StripeEventLog.php
new file mode 100644
index 0000000..d22bb0c
--- /dev/null
+++ b/src/AppBundle/Entity/StripeEventLog.php
@@ -0,0 +1,35 @@
+<?php
+
+namespace AppBundle\Entity;
+
+use Doctrine\ORM\Mapping as ORM;
+
+/**
+ * @ORM\Entity
+ * @ORM\Table(name="stripe_event_log")
+ */
+class StripeEventLog
+{
+    /**
+     * @ORM\Id
+     * @ORM\GeneratedValue(strategy="AUTO")
+     * @ORM\Column(type="integer")
+     */
+    private $id;
+
+    /**
+     * @ORM\Column(type="string", unique=true)
+     */
+    private $stripeEventId;
+
+    /**
+     * @ORM\Column(type="datetime")
+     */
+    private $handledAt;
+
+    public function __construct($stripeEventId)
+    {
+        $this->stripeEventId = $stripeEventId;
+        $this->handledAt = new \DateTime();
+    }
+}
diff --git a/tests/AppBundle/Controller/WebhookControllerTest.php b/tests/AppBundle/Controller/WebhookControllerTest.php
index c42db4a..fbe4d63 100644
--- a/tests/AppBundle/Controller/WebhookControllerTest.php
+++ b/tests/AppBundle/Controller/WebhookControllerTest.php
@@ -74,7 +74,7 @@ class WebhookControllerTest extends WebTestCase
 {
   "created": 1326853478,
   "livemode": false,
-  "id": "evt_00000000000000",
+  "id": "evt_00000000000000%s",
   "type": "customer.subscription.deleted",
   "object": "event",
   "request": null,
@@ -122,6 +122,6 @@ class WebhookControllerTest extends WebTestCase
 }
 EOF;
 
-        return sprintf($json, $subscriptionId);
+        return sprintf($json, mt_rand(), $subscriptionId);
     }
 }
